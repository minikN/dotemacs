* Emacs Configuration
** Aliases
y/n instead of yes/no:
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** Packages
*** straight.el (package manager)
#+BEGIN_SRC emacs-lisp
  (setq straight-use-package-by-default t) 
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
  (straight-use-package 'use-package)
#+END_SRC
*** Theme
#+BEGIN_SRC emacs-lisp

  (straight-use-package
   '(emacs-monokai-pro-theme :host github :repo "minikN/emacs-monokai-pro-theme"
                             :branch "master")
   :init (load-theme 'monokai-pro t))


  (monokai-pro-theme-set-faces 'monokai-pro monokai-pro-spectrum-theme-colors monokai-pro-faces)
#+END_SRC
*** which-key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode))
#+END_SRC
*** company (auto completion)
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :init
    (add-hook 'after-init-hook 'global-company-mode))

  (use-package company-box
    :ensure t
    :hook (company-mode . company-box-mode))
#+END_SRC
*** Avy (Searching in visible buffer)
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char))
#+END_SRC
*** Swiper (Searching in buffer)
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t
    :bind ("C-s" . swiper))
#+END_SRC
*** Hungry delete (Kill whitespace in bulk)
#+BEGIN_SRC emacs-lisp
  (use-package hungry-delete
    :ensure t
    :config (global-hungry-delete-mode))
#+END_SRC
*** sudo-edit
#+BEGIN_SRC emacs-lisp
  (if (eq system-type 'gnu/linux)
  (use-package sudo-edit
    :ensure t
    :bind ("C-c s" . sudo-edit))
  )
#+END_SRC
*** rainbow-delimiters (highlight brackets)
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :init
    (rainbow-delimiters-mode 1))
#+END_SRC
*** IDO (Switching buffers)
Enabling IDO mode
#+BEGIN_SRC emacs-lisp
  (setq ido-enable-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)
#+END_SRC

Enabling IDO vertical
#+BEGIN_SRC emacs-lisp
  (use-package ido-vertical-mode
    :ensure t
    :init
    (ido-vertical-mode 1))
  (setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+END_SRC

Enabling IDO for M-x (Smex)
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure t
    :init (smex-initialize)
    :bind ("M-x" . smex))
#+END_SRC

Enabling iBuffer expert mode
#+BEGIN_SRC emacs-lisp
  (setq ibuffer-expert t)
#+END_SRC
*** DOOM modeline
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :ensure t
    :hook (after-init . doom-modeline-mode))
  (use-package all-the-icons
    :ensure t)
#+END_SRC
*** popup-kill-ring (Menu for the kill ring)
#+BEGIN_SRC emacs-lisp
  (use-package popup-kill-ring
    :ensure t
    :bind ("M-y" . 'popup-kill-ring))
#+END_SRC
*** mark-multiple (multiple cursors)
#+BEGIN_SRC emacs-lisp
  (use-package mark-multiple
    :ensure t
    :bind ("C-c q" . 'mark-next-like-this))
#+END_SRC
*** expand-region (mark by region)
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :bind ("C-q" . 'er/expand-region))
#+END_SRC
*** LaTeX
#+BEGIN_SRC emacs-lisp
  ;(use-package tex
  ;  :defer t
  ;  :ensure auctex
  ;  :config
  ;  (setq TeX-auto-save t))
  ;(TeX-PDF-mode t)

  ;; Use pdf-tools to open PDF files
  ;(setq TeX-view-program-selection '((output-pdf "PDF Tools"))
  ;      TeX-source-correlate-start-server t)

  ;; Update PDF buffers after successful LaTeX runs
  ;(add-hook 'TeX-after-compilation-finished-functions
  ;           #'TeX-revert-document-buffer)
#+END_SRC
*** PDF
#+BEGIN_SRC emacs-lisp
  ; =pdf-tools= for previewing pdf files with =auctex=
  (use-package pdf-tools
    :ensure t
    :config
    (pdf-tools-install
     (setq-default pdf-view-display-size 'fit-page)))

  ; =org-pdfview= for previewing pdf files with =org-mode=
  (use-package org-pdfview
    :ensure t
    :after (org)
    :config
    (add-to-list 'org-file-apps
		 '("\\.pdf\\'" . (lambda (file link)
				   (org-pdfview-open link)))))

  (add-hook 'pdf-view-mode-hook 'auto-revert-mode)

  ; auto reload pdf view on save
  (defun toggle-org-latex-export-on-save ()
    (interactive)
    (if (memq 'org-latex-export-to-pdf after-save-hook)
	(progn
	  (remove-hook 'after-save-hook 'org-latex-export-to-pdf t)
	  (message "Disabled org html export on save for current buffer..."))
      (add-hook 'after-save-hook 'org-latex-export-to-pdf nil t)
      (message "Enabled org html export on save for current buffer...")))
#+END_SRC
** Keybindings
Terminal:
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "^") 'ansi-term)
#+END_SRC

Config:
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c e") 'config-edit)
  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC

Buffers:
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+END_SRC

Windows:	
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x 2") 'split-and-focus-h)
  (global-set-key (kbd "C-x 3") 'split-and-focus-v)
#+END_SRC
** Functions
*** terminal
Setting default shell to bash
#+BEGIN_SRC emacs-lisp
  (defvar my-term-shell "/bin/bash")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)
#+END_SRC

setting default shell to bash (on windows)
#+BEGIN_SRC emacs-lisp
  (if (eq system-type 'windows-nt)
      (defun run-bash ()
        (interactive)
        (let ((shell-file-name "C:\\msys64\\usr\\bin\\bash.exe"))
          (shell "*bash*"))
        )
  )
#+END_SRC

Open terminal in a new vertical window
#+BEGIN_SRC emacs-lisp
  (defun run-term-vertical ()
    (interactive)
    (progn 
            'split-and-focus-v
            'ansi-term))
#+END_SRC
*** config
#+BEGIN_SRC emacs-lisp
  (defun config-edit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
#+END_SRC
*** windows
Focus new window after creation
#+BEGIN_SRC emacs-lisp 
  (defun split-and-focus-h ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))

  (defun split-and-focus-v ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
#+END_SRC
*** fullscreen (windows only)
#+BEGIN_SRC emacs-lisp  
  (if (eq system-type 'windows-nt)
        (defun toggle-full-screen () (interactive) (shell-command "emacs_fullscreen.exe"))
        (global-set-key [f11] 'toggle-full-screen)
    )
#+END_SRC
*** kill current buffer immediately
#+BEGIN_SRC emacs-lisp
  (defun kill-current-buffer ()
    (interactive)
    (kill-buffer (current-buffer)))
  (global-set-key (kbd "C-x k") 'kill-current-buffer)
#+END_SRC
*** kill all buffers
#+BEGIN_SRC emacs-lisp
  (defun kill-all-buffers ()
    (interactive)
    (mapc 'kill-buffer (buffer-list)))
  (global-set-key (kbd "C-c k a") 'kill-all-buffers)
#+END_SRC
*** VIM functions
**** yank line (yy)
#+BEGIN_SRC emacs-lisp
  (defun copy-whole-line ()
    (interactive)
    (save-excursion
      (kill-new
       (buffer-substring
	(point-at-bol)
	(point-at-eol)))))
  (global-set-key (kbd "C-c y y") 'copy-whole-line)
#+END_SRC
**** kill word (ciw)
#+BEGIN_SRC emacs-lisp
  (defun kill-whole-word ()
    (interactive)
    (backward-word)
    (kill-word 1))
  (global-set-key (kbd "C-c i w") 'kill-whole-word)
#+END_SRC
**** kill line (dd)
#+BEGIN_SRC emacs-lisp
  (defun kill-current-line (&optional n)
    (interactive "p")
    (save-excursion
      (beginning-of-line)
      (let ((kill-whole-line t))
	(kill-line n))))
  (global-set-key (kbd "C-c d d") 'kill-current-line)
#+END_SRC
**** new line above (o)
#+BEGIN_SRC emacs-lisp
  (defun new-line-above ()
    (interactive)
    (unless (bolp)
      (beginning-of-line))
    (newline)
    (forward-line -1)
    (indent-according-to-mode))
  (global-set-key (kbd "C-c o") 'new-line-above)
#+END_SRC
**** new line belove (O)
#+BEGIN_SRC emacs-lisp
  (defun new-line-below ()
    (interactive)
    (unless (eolp)
      (end-of-line))
    (newline-and-indent))
  (global-set-key (kbd "C-c O") 'new-line-below)
#+END_SRC
*** what face
#+BEGIN_SRC emacs-lisp
  (defun what-face (pos)
    (interactive "d")
    (let ((face (or (get-char-property (pos) 'read-face-name)
		    (get-char-property (pos) 'face))))
      (if face (message "Face: %s" face) (message "No face at %d" pos))))
#+END_SRC
** UI
Start emacs in full screen:
#+BEGIN_SRC emacs-lisp
  (custom-set-variables
   '(initial-frame-alist (quote ((fullscreen . maximized)))))
#+END_SRC

Remove tool-, menu- and scrollbar:
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (window-divider-mode 1)
#+END_SRC

Set font
#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(font . "Inconsolata-11"))
  (set-face-attribute 'default t :font "Inconsolata-11")
#+END_SRC

Make the divider invisible
#+BEGIN_SRC emacs-lisp
  (setq-default window-divider-default-right-width 1)
  (set-face-foreground 'window-divider (face-attribute 'default :background))
  (set-face-foreground 'window-divider-first-pixel (face-attribute 'window-divider-last-pixel :foreground))
#+END_SRC

Remove startup buffer:
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
#+END_SRC

Set frame margins width:
#+BEGIN_SRC emacs-lisp
  (setq-default left-margin-width 1 right-margin-width 1)
  (set-window-buffer nil (current-buffer))
#+END_SRC

Set frame margin color:
#+BEGIN_SRC emacs-lisp
  (set-face-background 'fringe "transparent")
#+END_SRC

** Editor
Enable normal scroll mode:
#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 100)
#+END_SRC

Mute the bell:
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC

Highlight current line
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode t)
#+END_SRC

Make TAB indent or autocomplete based on cursor position:
#+BEGIN_SRC emacs-lisp
  (setq-default tab-always-indent nil)
#+END_SRC

Prettify lambda to symbol
#+BEGIN_SRC emacs-lisp
  (global-prettify-symbols-mode t)
#+END_SRC

Autocomplete (, [, {
#+BEGIN_SRC emacs-lisp
  (setq electric-pair-pairs '(
			      (?\( . ?\))
			      (?\[ . ?\])
			      (?\{ . ?\})
			      (?\" . ?\")
			      (?\' . ?\')
			      ))
  (electric-pair-mode 1)
#+END_SRC
** Modeline
*** Show lines and columns 
#+BEGIN_SRC emacs-lisp
  (line-number-mode 1)
  (column-number-mode 1)
#+END_SRC
** Other
No backups/autosaves:
#+BEGIN_SRC emacs-lisp
  (setq make-backup-file nil)
  (setq auto-save-default nil)
#+END_SRC
** ORG Mode
#+BEGIN_SRC emacs-lisp
  ;; Currently disabled
  ;; Open temporary buffer in same window'C'
  ; (setq org-src-window-setup 'current-window)

  ;; Indent properly
  (add-hook 'org-mode-hook 'org-indent-mode)
#+END_SRC
Snippet for creating elisp code
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
	       '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC
** PHP Mode
#+BEGIN_SRC emacs-lisp
  (use-package php-mode
    :ensure t)
#+END_SRC
