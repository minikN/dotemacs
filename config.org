* Configuration
** Constants
#+BEGIN_SRC emacs-lisp
  (defvar SHELL "/bin/bash")
#+END_SRC
** Aliases
*** Yes/No
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** User Interface
*** Theme
#+BEGIN_SRC emacs-lisp
  (use-package monokai-pro-theme
    :straight (emacs-monokai-pro-theme :host github :repo "minikN/emacs-monokai-pro-theme")
    :init (load-theme 'monokai-pro t)
    (monokai-pro-theme-set-faces 'monokai-pro monokai-pro-spectrum-theme-colors monokai-pro-faces))
#+END_SRC
*** Modeline
Set modeline to doom-modeline
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :straight t
    :init (add-hook 'after-init-hook 'doom-modeline-mode))

  (use-package all-the-icons :straight t)
#+END_SRC

Show line and column numbers in modeline
#+BEGIN_SRC emacs-lisp
  (line-number-mode 1)
  (column-number-mode 1)
#+END_SRC
*** Window
Remove tool-, menu- and scroll bar
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (menu-bar-mode -1)
  (window-divider-mode 1)

  ;(add-to-list 'default-frame-alist
  ;             '(vertical-scroll-bars . nil))
#+END_SRC

Make divider invisible
#+BEGIN_SRC emacs-lisp
;  (setq-default window-divider-default-right-width 1)
;  (set-face-foreground 'window-divider (face-attribute 'default :background))
;  (set-face-foreground 'window-divider-first-pixel (face-attribute 'window-divider-last-pixel :foreground))
#+END_SRC

Remove startup buffer
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
#+END_SRC

Set frame margins
#+BEGIN_SRC emacs-lisp
;  (setq-default left-margin-width 1 right-margin-width 1)
;  (set-window-buffer nil (current-buffer))
;  (set-face-background 'fringe "transparent")
#+END_SRC

*** Editor
Set font
#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(font . "Inconsolata-12"))
  (set-face-attribute 'default t :font "Inconsolata-12")
#+END_SRC

Enable normal scroll mode
#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 100)
#+END_SRC

Mute bell
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC

Highlight current line
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode t)
#+END_SRC

Make TAB indent based on current position
#+BEGIN_SRC emacs-lisp
  (setq-default tab-always-indent nil)
#+END_SRC

Prettify lambda and other symbols
#+BEGIN_SRC emacs-lisp
  (global-prettify-symbols-mode t)
#+END_SRC

Auto completion closing sibling (==), ], }==)
#+BEGIN_SRC emacs-lisp
  (setq electric-pair-pairs '(
				(?\( . ?\))
				(?\[ . ?\])
				(?\{ . ?\})
				(?\" . ?\")
				(?\' . ?\')
				))
  (electric-pair-mode 1)
#+END_SRC
** Packages
*** avy
Search in visible buffer
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :straight t
    :init (global-set-key (kbd "M-s") #'avy-goto-char))
#+END_SRC
*** company
Autocompletion in a popup
#+BEGIN_SRC emacs-lisp
  (use-package company
    :straight t
    :diminish company-mode
    :init (add-hook 'after-init-hook 'global-company-mode)
    :custom
    (company-idle-delay 0)
    (company-echo-delay 0)
    (company-minimum-prefix-length 1))

  (use-package company-box
    :straight (company-box :host github :repo "minikN/company-box")
    :diminish
    :hook (company-mode . company-box-mode)
    :init (setq company-box-show-single-candidate t
                company-box-max-candidates 50
                company-box-doc-enable nil
                company-box-icon-left-margin 1
                company-box-scrollbar nil))
#+END_SRC
*** expand-region
Expand selection to region
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :straight t
    :init (global-set-key (kbd "C-q") #'er/expand-region))
#+END_SRC
*** flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :straight t
    :init (add-hook 'php-mode-hook 'flycheck-mode))
#+END_SRC
*** hungry-delete
Delete whitspace in bulk
#+BEGIN_SRC emacs-lisp
  (use-package hungry-delete
    :straight t
    :config (global-hungry-delete-mode))
#+END_SRC
*** IDO mode
Enable IDO mode
#+BEGIN_SRC emacs-lisp
  (setq ido-enable-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)
#+END_SRC

Make the buffer-list vertical
#+BEGIN_SRC emacs-lisp
  (use-package ido-vertical-mode
    :straight t
    :init (progn
	    (ido-vertical-mode 1)
	    (setq ido-vertical-define-keys 'C-n-and-C-p-only)))
#+END_SRC
*** LSP mode
Basic LSP mode setup
#+BEGIN_SRC emacs-lisp
  ;(use-package lsp-mode
  ;  :straight t
  ;  :config (setq lsp-prefer-flymake nil)
  ;  :init (add-hook 'php-mode-hook 'lsp)
  ;  :commands lsp)

  ;; optionally
  ;(use-package lsp-ui
  ;  :straight t
  ;  :after (lsp-mode)
  ;  :config (setq lsp-ui-doc-enable t
  ;                lsp-ui-doc-use-childframe nil
  ;                lsp-ui-doc-position ‘top
  ;                lsp-ui-doc-include-signature nil
  ;                lsp-ui-sideline-enable nil
  ;                lsp-ui-flycheck-enable t
  ;                lsp-ui-flycheck-list-position ‘right
  ;                lsp-ui-flycheck-live-reporting t
  ;                lsp-ui-peek-enable t
  ;                lsp-ui-peek-list-width 60
  ;                lsp-ui-peek-peek-height 25
  ;                lsp-ui-sideline-enable nil
  ;                (add-hook 'lsp-mode-hook ‘lsp-ui-mode))
  ;  :commands lsp-ui-mode)

  ;(use-package company-lsp
  ;  :straight t
  ;  :commands company-lsp)
#+END_SRC
*** mark-multiple
Mark multiple occureces of the same selection
#+BEGIN_SRC emacs-lisp
  (use-package mark-multiple
    :straight t
    :init (global-set-key (kbd "C-c q") #'mark-next-like-this))
#+END_SRC
*** ORG mode
Preview pdf files in ORG mode
#+BEGIN_SRC emacs-lisp
    (use-package org-pdfview
      :straight t
      :after (org)
      :config
      (add-to-list 'org-file-apps
                    '("\\.pdf\\'" . (lambda (file link)
                                      (org-pdfview-open link)))))
#+END_SRC

Preview PDF tools in LaTeX
#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
    :straight t
    :config
    (pdf-tools-install
     (setq-default pdf-view-display-size 'fit-page)))
#+END_SRC

Enable auto-revert-mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'pdf-view-mode-hook 'auto-revert-mode)
#+END_SRC

Indent lists properly
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
  (add-hook 'org-indent-mode-hook 'org-reload)
#+END_SRC
*** PHP mode
Install php-mode
#+BEGIN_SRC emacs-lisp
  (use-package php-mode
    :straight t)
#+END_SRC
*** rainbow-delimiters
Color matching delimiters (==(, {, [==) in different colors
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :straight t
    :init
    (rainbow-delimiters-mode 1))
#+END_SRC
*** smex
IDO-like list for M-x
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :straight t
    :init (progn
	    (smex-initialize)
	    (global-set-key (kbd "M-x") #'smex)))
#+END_SRC
*** sudo-edit
Edit files with sudo priviledges if necessary
#+BEGIN_SRC emacs-lisp
  (if (eq system-type 'gnu/linux)
      (use-package sudo-edit
	:straight t
	:init (global-set-key (kbd "C-c s") #'sudo-edit)))
#+END_SRC
*** swiper
Search in whole buffer
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :straight t
    :init (global-set-key (kbd "C-s") #'swiper))
#+END_SRC
*** which-key
Show possible completions in mini-buffer
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :straight t
    :init (which-key-mode 1))
#+END_SRC
** Keybindings
*** Config file
#+BEGIN_SRC emacs-lisp 
  (global-set-key (kbd "C-c e") 'config-edit)
  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC
*** iBuffer
#+BEGIN_SRC emacs-lisp
  (setq ibuffer-expert t)
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+END_SRC
*** Terminal
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "^") 'run-term-vertical)
#+END_SRC

*** Windows
Immediately focus a new window
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x 2") 'split-and-focus-h)
  (global-set-key (kbd "C-x 3") 'split-and-focus-v)
#+END_SRC
** Functions
*** Config file
Edit the config file
#+BEGIN_SRC emacs-lisp
  (defun config-edit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
#+END_SRC

Reload the config file
#+BEGIN_SRC emacs-lisp
  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
#+END_SRC
*** Buffers
Kill current buffer immediately
#+BEGIN_SRC emacs-lisp
  (defun kill-current-buffer ()
    (interactive)
    (kill-buffer (current-buffer)))
  (global-set-key (kbd "C-x k") 'kill-current-buffer)
#+END_SRC

Kill all buffers
#+BEGIN_SRC emacs-lisp
  (defun kill-all-buffers ()
    (interactive)
    (mapc 'kill-buffer (buffer-list))
    (delete-other-windows))
  (global-set-key (kbd "C-x K") 'kill-all-buffers)
#+END_SRC
*** Terminal
Set default shell for ansi-term to bash
#+BEGIN_SRC emacs-lisp
  (defadvice ansi-term (before force-bash)
    (interactive (list SHELL)))
  (ad-activate 'ansi-term)
#+END_SRC

Open ansi-term in a vertical window
#+BEGIN_SRC emacs-lisp
  (defun run-term-vertical ()
    "Start terminal in a new vertical split"
    (interactive)
    (split-window-sensibly)
    (other-window 1)
    (ansi-term (executable-find SHELL)))
#+END_SRC
*** Windows
Focus new windows
#+BEGIN_SRC emacs-lisp
  (defun split-and-focus-h ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))

  (defun split-and-focus-v ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
#+END_SRC
*** Other
Inspect the face under the cursor
#+BEGIN_SRC emacs-lisp
  (defun what-face (pos)
    (interactive "d")
    (let ((face (or (get-char-property (pos) 'read-face-name)
                    (get-char-property (pos) 'face))))
      (if face (message "Face: %s" face) (message "No face at %d" pos))))
#+END_SRC
** Snippets
*** ORG mode
Lisp code snippet
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
		 '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC
** Other
No backups/autosaves
#+BEGIN_SRC emacs-lisp
  (setq make-backup-file nil)
  (setq auto-save-default nil)
#+END_SRC

Set encoding to UTF-8
#+BEGIN_SRC emacs-lisp
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+END_SRC
