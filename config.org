* Configuration
** Constants
#+BEGIN_SRC emacs-lisp
  (defvar SHELL "/bin/bash")
#+END_SRC
** Aliases
*** Yes/No
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** User Interface
*** Theme
#+BEGIN_SRC emacs-lisp
  (use-package monokai-pro-theme
    :straight (emacs-monokai-pro-theme :host github :repo "minikN/emacs-monokai-pro-theme")
    :init (load-theme 'monokai-pro t)
    (monokai-pro-theme-set-faces 'monokai-pro monokai-pro-spectrum-theme-colors monokai-pro-faces))
#+END_SRC
*** Modeline
Set modeline to doom-modeline
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :straight t
    :init (add-hook 'after-init-hook 'doom-modeline-mode))

  (use-package all-the-icons :straight t)
#+END_SRC

Show line and column numbers in modeline
#+BEGIN_SRC emacs-lisp
  (line-number-mode 1)
  (column-number-mode 1)
#+END_SRC
*** Window
Remove tool-, menu- and scroll bar
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (menu-bar-mode -1)
  (window-divider-mode -1)

  ;(add-to-list 'default-frame-alist
  ;             '(vertical-scroll-bars . nil))
#+END_SRC

Remove startup buffer
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
#+END_SRC
*** Editor
Set font
#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(font . "Inconsolata LGC-10.5"))
  (set-face-attribute 'default t :font "Inconsolata LGC-10.5")
#+END_SRC

Set left fringe width
#+BEGIN_SRC emacs-lisp
  (fringe-mode '(10 . 0))
#+END_SRC

Set line padding
#+BEGIN_SRC emacs-lisp
  ;; (defun add-line-padding (lp)
  ;;   "Add extra padding between lines"

  ;;   ; remove padding overlays if they already exist
  ;;   (let ((overlays (overlays-at (point-min))))
  ;;     (while overlays
  ;;       (let ((overlay (car overlays)))
  ;; 	(if (overlay-get overlay 'is-padding-overlay)
  ;; 	    (delete-overlay overlay)))
  ;;       (setq overlays (cdr overlays))))

  ;; 					; add a new padding overlay
  ;;   (let ((padding-overlay (make-overlay (point-min) (point-max))))
  ;;     (overlay-put padding-overlay 'is-padding-overlay t)
  ;;     (overlay-put padding-overlay 'line-spacing (* .1 lp))
  ;;     (overlay-put padding-overlay 'line-height (+ 1 (* .1 lp))))
  ;;   (setq mark-active nil))

  ;; ;(add-hook 'buffer-list-update-hook (lambda () (add-line-padding 1.3)))
  ;; ;(add-hook 'term-mode-hook (lambda () (add-line-padding 0)))
#+END_SRC

Enable relative line numbers
#+BEGIN_SRC emacs-lisp
  (setq-default display-line-numbers-type 'visual
                display-line-numbers-current-absolute nil
                display-line-numbers-width -5
                display-line-numbers-widen nil)
  (add-hook 'prog-mode-hook #'display-line-numbers-mode)
#+END_SRC

Enable normal scroll mode
#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 100)
#+END_SRC

Mute bell
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC

Highlight current line
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode t)
#+END_SRC

Highlight matching brackets
#+BEGIN_SRC emacs-lisp
  (setq show-paren-style 'parenthesis)
  (show-paren-mode 1)
#+END_SRC

Make TAB indent based on current position
#+BEGIN_SRC emacs-lisp
  (setq-default tab-always-indent nil)
#+END_SRC

Prettify lambda and other symbols
#+BEGIN_SRC emacs-lisp
  (global-prettify-symbols-mode t)
#+END_SRC

Auto completion closing sibling (==), ], }==)
#+BEGIN_SRC emacs-lisp
  (setq electric-pair-pairs '(
				(?\( . ?\))
				(?\[ . ?\])
				(?\{ . ?\})
				(?\" . ?\")
				(?\' . ?\')
				))
  (electric-pair-mode 1)
#+END_SRC
** Packages
*** avy
Search in visible buffer
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :straight t
    :init (global-set-key (kbd "M-s") #'avy-goto-char))
#+END_SRC
*** company
Autocompletion in a popup
#+BEGIN_SRC emacs-lisp
  (use-package company
    :straight t
    :diminish company-mode
    :init (add-hook 'after-init-hook 'global-company-mode)
    :custom
    (company-idle-delay 0)
    (company-echo-delay 0)
    (company-minimum-prefix-length 1)
    :config
    (defvar company-mode/enable-yas t
      "Enable yasnippet for all backends.")
    (defun company-mode/backend-with-yas (backend)
      (if (or (not company-mode/enable-yas) (and (listp backend) (member 'company-yasnippet backend)))
          backend
        (append (if (consp backend) backend (list backend))
                '(:with company-yasnippet))))
    (setq company-backends (mapcar #'company-mode/backend-with-yas company-backends)))
#+END_SRC

company-box
#+BEGIN_SRC emacs-lisp
  (use-package company-box
      :straight t
      :after (company)
      :hook (company-mode . company-box-mode)
      :config
      (setq company-box-show-single-candidate t
            company-box-icons-functions
            '(+company-box-icons--yasnippet-fn
              company-box-icons--lsp
              +company-box-icons--elisp-fn
              company-box-icons--acphp)
            company-box-icons-all-the-icons
          `((Unknown       . ,(all-the-icons-faicon       "question-circle"                   :face 'all-the-icons-white))
              (Text          . ,(all-the-icons-octicon    "file-text"             :face 'all-the-icons-green))
              (Method        . ,(all-the-icons-faicon     "cube"                  :face 'all-the-icons-purple))
              (Function      . ,(all-the-icons-faicon     "cube"                  :face 'all-the-icons-purple))
              (Constructor   . ,(all-the-icons-faicon     "cube"                  :face 'all-the-icons-purple))
              (Field         . ,(all-the-icons-faicon     "cog"                   :face 'all-the-icons-blue))
              (Variable      . ,(all-the-icons-faicon     "cog"                   :face 'all-the-icons-blue))
              (Class         . ,(all-the-icons-faicon     "cogs"                  :face 'all-the-icons-yellow))
              ;(Interface     . ,(all-the-icons-material "" 			:face 'all-the-icons-red))
              (Module        . ,(all-the-icons-alltheicon "less"                  :face 'all-the-icons-red))
              (Property      . ,(all-the-icons-faicon     "wrench"                :face 'all-the-icons-grey))
              ;(Unit          . ,(all-the-icons-material ""			:face 'all-the-icons-red))
              ;(Value         . ,(all-the-icons-material ""			:face 'all-the-icons-red))
              (Enum          . ,(all-the-icons-material   "content_copy"          :face 'all-the-icons-yellow))
              ;(Keyword       . ,(all-the-icons-material ""      		:face 'all-the-icons-red))
              (Snippet       . ,(all-the-icons-material    "content_paste"        :face 'all-the-icons-blue))
              (Color         . ,(all-the-icons-material   "palette"               :face 'all-the-icons-pink))
              (File          . ,(all-the-icons-faicon     "file"                  :face 'all-the-icons-grey))
              ;(Reference     . ,(all-the-icons-material ""     		:face 'all-the-icons-red))
              (Folder        . ,(all-the-icons-faicon     "folder"                :face 'all-the-icons-grey))
              ;(EnumMember    . ,(all-the-icons-material ""			:face 'all-the-icons-red))
              ;(Constant      . ,(all-the-icons-material ""      		:face 'all-the-icons-red))
              (Struct        . ,(all-the-icons-faicon     "cogs"                  :face 'all-the-icons-blue))
              (Event         . ,(all-the-icons-faicon     "bolt"                  :face 'all-the-icons-yellow))
              ;(Operator      . ,(all-the-icons-material ""            	:face 'all-the-icons-red))
              (TypeParameter . ,(all-the-icons-faicon     "cogs"                  :face 'all-the-icons-yellow))
              (Yasnippet     . ,(all-the-icons-faicon     "cube"                  :face 'all-the-icons-green))
              (ElispFunction . ,(all-the-icons-faicon     "cube"	              :face 'all-the-icons-purple))
              (ElispVariable . ,(all-the-icons-faicon   "cog"	              :face 'all-the-icons-blue))
              (ElispFeature  . ,(all-the-icons-material   "stars"                 :face 'all-the-icons-orange))
              (ElispFace     . ,(all-the-icons-material    "format_paint"         :face 'all-the-icons-pink)))
          company-box-icons-alist 'company-box-icons-all-the-icons
          ;company-box-backends-colors '((company-yasnippet . (:all "magenta" :selected (:background "magenta" :foreground "black"))))
          company-box-backends-colors '((company-yasnippet . (:all company-box-background
                                                                   :annotation company-box-annotation
                                                                   :selected company-box-selection))))
      (defun +company-box-icons--yasnippet-fn (candidate)
        (when (get-text-property 0 'yas-annotation candidate)
          'Yasnippet))

      (defun +company-box-icons--elisp-fn (candidate)
        (when (derived-mode-p 'emacs-lisp-mode)
          (let ((sym (intern candidate)))
            (cond ((fboundp sym)  'ElispFunction)
                  ((boundp sym)   'ElispVariable)
                  ((featurep sym) 'ElispFeature)
                  ((facep sym)    'ElispFace))))))

#+END_SRC

company-lsp
#+BEGIN_SRC emacs-lisp
  (use-package company-lsp
    :straight t
    :after (company)
    :config
    (push 'company-lsp company-backends))
#+END_SRC
*** expand-region
Expand selection to region
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :straight t
    :init (global-set-key (kbd "C-q") #'er/expand-region))
#+END_SRC
*** flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :straight t
    :hook (php-mode . flycheck-mode)
    :config
    (define-fringe-bitmap 'flycheck-fringe-bitmap-ball
      (vector #b00000000
              #b00000000
              #b00000000
              #b00000000
              #b00000000
              #b00000000
              #b01111110
              #b01111110
              #b01111110
              #b01111110
              #b01111110
              #b00000000
              #b00000000
              #b00000000
              #b00000000
              #b00000000
              #b00000000))

  (flycheck-define-error-level 'error
    :severity 100
    :compilation-level 2
    :overlay-category 'flycheck-error-overlay
    :fringe-bitmap 'flycheck-fringe-bitmap-ball
    :fringe-face 'flycheck-fringe-error
    :error-list-face 'flycheck-error-list-error)

  (flycheck-define-error-level 'warning
    :severity 100
    :compilation-level 2
    :overlay-category 'flycheck-warning-overlay
    :fringe-bitmap 'flycheck-fringe-bitmap-ball
    :fringe-face 'flycheck-fringe-warning
    :warning-list-face 'flycheck-warning-list-error)

  (flycheck-define-error-level 'info
    :severity 100
    :compilation-level 2
    :overlay-category 'flycheck-info-overlay
    :fringe-bitmap 'flycheck-fringe-bitmap-ball
    :fringe-face 'flycheck-fringe-info
    :info-list-face 'flycheck-info-list-error))
#+END_SRC
*** hungry-delete
Delete whitspace in bulk
#+BEGIN_SRC emacs-lisp
  (use-package hungry-delete
    :straight t
    :config (global-hungry-delete-mode))
#+END_SRC
*** IDO mode
Enable IDO mode
#+BEGIN_SRC emacs-lisp
  (setq ido-enable-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)
#+END_SRC

Make the buffer-list vertical
#+BEGIN_SRC emacs-lisp
  (use-package ido-vertical-mode
    :straight t
    :init (progn
	    (ido-vertical-mode 1)
	    (setq ido-vertical-define-keys 'C-n-and-C-p-only)))
#+END_SRC
*** LaTeX
#+BEGIN_SRC emacs-lisp
  (use-package tex
    :straight auctex
    :defer t
    :config
    (setq TeX-auto-save t)
    (setq TeX-parse-self t))
#+END_SRC
*** LSP mode
Basic LSP mode setup
#+BEGIN_SRC emacs-lisp
    (use-package lsp-mode
      :straight t
      :hook (php-mode . lsp)
      :config (setq lsp-file-watch-threshold 10000))

    (use-package lsp-ui
      :straight t
      :after lsp-mode
      :hook (lsp-mode . lsp-ui-mode)
      :config
      (setq lsp-ui-doc-enable t
            lsp-ui-flycheck-enable nil
            lsp-ui-imenu-enable t
            lsp-ui-peek-always-show t
            lsp-ui-peek-enable t
            lsp-ui-sideline-enable t
            lsp-ui-sideline-show-code-actions t
            lsp-ui-sideline-show-diagnostics t
            lsp-ui-sideline-show-hover t
            lsp-ui-peek-show-directory nil)
      (define-key lsp-ui-mode-map [remap xref-find-definitions] #'lsp-ui-peek-find-definitions)
      (define-key lsp-ui-mode-map [remap xref-find-references] #'lsp-ui-peek-find-references))
#+END_SRC
*** mark-multiple
Mark multiple occureces of the same selection
#+BEGIN_SRC emacs-lisp
  (use-package mark-multiple
    :straight t
    :init (global-set-key (kbd "C-c q") #'mark-next-like-this))
#+END_SRC
*** ORG mode
#+BEGIN_SRC emacs-lisp
  (use-package org
    :straight t
    :config
    (org-reload)
    (setq org-startup-indented t))
#+END_SRC

Preview pdf files in ORG mode
#+BEGIN_SRC emacs-lisp
    (use-package org-pdfview
      :straight t
      :after (org)
      :config
      (add-to-list 'org-file-apps
                    '("\\.pdf\\'" . (lambda (file link)
                                      (org-pdfview-open link)))))
#+END_SRC

Preview PDF tools in LaTeX
#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
    :straight t
    :config
    (pdf-tools-install
     (setq-default pdf-view-display-size 'fit-page)))
#+END_SRC

Enable auto-revert-mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'pdf-view-mode-hook 'auto-revert-mode)
#+END_SRC

ORG-Mode LaTeX LLNCS
#+BEGIN_SRC emacs-lisp
  (unless (boundp 'org-latex-classes)
    (setq org-latex-classes nil))

  (add-to-list 'org-latex-classes
               '("LLNCS"
                 "\\documentclass{llncs}
                          \\usepackage{graphicx}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+END_SRC
*** PHP mode
Install php-mode
#+BEGIN_SRC emacs-lisp
  ;(use-package php-mode
  ;  :straight t)

  (use-package php-mode
    :straight (php-mode :host github :repo "minikN/php-mode"))
#+END_SRC
*** smex
IDO-like list for M-x
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :straight t
    :init (progn
	    (smex-initialize)
	    (global-set-key (kbd "M-x") #'smex)))
#+END_SRC
*** sudo-edit
Edit files with sudo priviledges if necessary
#+BEGIN_SRC emacs-lisp
  (if (eq system-type 'gnu/linux)
      (use-package sudo-edit
	:straight t
	:init (global-set-key (kbd "C-c s") #'sudo-edit)))
#+END_SRC
*** swiper
Search in whole buffer
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :straight t
    :init (global-set-key (kbd "C-s") #'swiper))
#+END_SRC
*** which-key
Show possible completions in mini-buffer
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :straight t
    :init (which-key-mode 1))
#+END_SRC
*** yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :straight t
    :hook (org-mode . yas-minor-mode)
    :hook (php-mode . yas-minor-mode)
    :config
    (with-eval-after-load 'yasnippet
      (setq yas-snippet-dirs '("~/.emacs.d/snippets")))
    (yas-reload-all))
#+END_SRC
** Keybindings
*** Config file
#+BEGIN_SRC emacs-lisp 
  (global-set-key (kbd "C-c e") 'config-edit)
  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC
*** iBuffer
#+BEGIN_SRC emacs-lisp
  (setq ibuffer-expert t)
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+END_SRC
*** Terminal
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<M-return>") 'run-term-vertical)
#+END_SRC

*** Windows
Immediately focus a new window
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x 2") 'split-and-focus-h)
  (global-set-key (kbd "C-x 3") 'split-and-focus-v)
#+END_SRC
** Functions
*** Config file
Edit the config file
#+BEGIN_SRC emacs-lisp
  (defun config-edit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
#+END_SRC

Reload the config file
#+BEGIN_SRC emacs-lisp
  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
#+END_SRC
*** Buffers
Kill current buffer immediately
#+BEGIN_SRC emacs-lisp
  (defun kill-current-buffer ()
    (interactive)
    (kill-buffer (current-buffer)))
  (global-set-key (kbd "C-x k") 'kill-current-buffer)
#+END_SRC

Kill all buffers
#+BEGIN_SRC emacs-lisp
  (defun kill-all-buffers ()
    (interactive)
    (mapc 'kill-buffer (buffer-list))
    (delete-other-windows))
  (global-set-key (kbd "C-x K") 'kill-all-buffers)
#+END_SRC
*** Terminal
Set default shell for ansi-term to bash
#+BEGIN_SRC emacs-lisp
  (defadvice ansi-term (before force-bash)
    (interactive (list SHELL)))
  (ad-activate 'ansi-term)
#+END_SRC

Open ansi-term in a vertical window
#+BEGIN_SRC emacs-lisp
  (defun run-term-vertical ()
    "Start terminal in a new vertical split"
    (interactive)
    (split-window-sensibly)
    (other-window 1)
    (ansi-term (executable-find SHELL)))
#+END_SRC
*** Windows
Focus new windows
#+BEGIN_SRC emacs-lisp
  (defun split-and-focus-h ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))

  (defun split-and-focus-v ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
#+END_SRC
*** Other
Inspect the face under the cursor
#+BEGIN_SRC emacs-lisp
  (defun what-face (pos)
    (interactive "d")
    (let ((face (or (get-char-property (pos) 'read-face-name)
                    (get-char-property (pos) 'face))))
      (if face (message "Face: %s" face) (message "No face at %d" pos))))
#+END_SRC
** Other
Disable flymake completely
#+BEGIN_SRC emacs-lisp
#+END_SRC

No backups/autosaves
#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
  (setq auto-save-default nil)
#+END_SRC

Set encoding to UTF-8
#+BEGIN_SRC emacs-lisp
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+END_SRC
